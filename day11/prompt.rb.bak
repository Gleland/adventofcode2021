require 'set'
# Given the starting energy levels of the dumbo octopuses in your cavern, simulate 100 steps.
# How many total flashes are there after 100 steps?

@grid = File.readlines('testinput',chomp: true).map{ |r| r.chars.map(&:to_i) }

def check_neighbors(r,c,loc)
    affected_neighbors = []
    neighbors = [
      [r-1,c], # above
      [r-1,c-1], # above-left
      [r-1,c+1], # above-right
      [r,c-1], # left
      [r,c+1], # right
      [r+1,c], #below
      [r+1,c-1], # below-left
      [r+1,c+1], # below-right
    ]
    # if loc == [1,1]
    #   pp "neighbors: #{neighbors}"
    #   exit
    # end
    neighbors.each do |r,c|
      if r.nil? or r < 0 or r > @grid.size-1
        next
      end
      if c.nil? or c < 0 or c > @grid[r].size-1
        next
      end
      if @grid[r][c] <= 9
        affected_neighbors << [r,c]
      end
    end
    # found an affected neighbor
    # found a point, let's check its neighbors too
    pp "***********: #{affected_neighbors}"
    return affected_neighbors
end

def check_for_flashing
  pp "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  flashing_octopi = []
  @grid.each_with_index do |row,i|
    row.each_with_index do |val,j|
      if val > 9
        if !@flashing_octopi.include? [i,j]
          flashing_octopi << [i,j]
        end
      end
    end
  end
  pp "found flashing: #{flashing_octopi}"
  return flashing_octopi
end

def find_affected_neighbors(flashing_octopi)
  # find affected neighbors
  affected_neighbors = []
  flashing_octopi.each do |loc|
    affected =  check_neighbors(loc[0],loc[1], loc)
    if !affected.nil?
      affected_neighbors +=  affected #- flashing_octopi
    end
  end
  pp "without map: #{affected_neighbors}"
  pp "with map: #{affected_neighbors.select{ |i,j| @grid[i][j] <= 9 }}"
  return affected_neighbors.select{ |i,j| @grid[i][j] <= 9 }
end


total_flashes = 0
2.times do |step|
  # increase energy by one
  pp "before step #{step+1}"
  pp @grid
  pp "incrementing"
  @grid.map!{ |row| row.map!{ |v| v+1 } }
  pp "after incrementing"
  pp @grid
  @flashing_octopi = []
  flashes_to_check = true
  while flashes_to_check
    @flashing_octopi = check_for_flashing
    pp ":her----------: #{@flashing_octopi}"
    affected_neighbors = find_affected_neighbors(@flashing_octopi)
    affected_neighbors.each do |loc|
       @grid[loc[0]][loc[1]] += 1
    end
    pp "after incrementing neighbors"
    pp @grid
    pp "combined: #{@flashing_octopi + affected_neighbors}"
    @flashing_octopi = check_for_flashing
    if @flashing_octopi.empty?
      pp "hereeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
      flashes_to_check = false
      # increment them
    end
  end
  # set flashing octopi energy back to 0
  @grid.each do |row|
    row.each do |v|
      if v > 9
        total_flashes += 1
      end
    end
  end
  @grid.map! { |row| row.map! { |v| v > 9 ? 0 : v}}
  pp "after step #{step+1}"
  pp @grid
  pp total_flashes
end
# 8263 too high
